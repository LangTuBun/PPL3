# Generated from c:/Users/RAZER/OneDrive/Documents/HCMUTSUB/PPL/assignment3/initial/MiniGo (3).g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


# 2252287
import sys
from lexererr import *
from antlr4.Token import CommonToken


def serializedATN():
    return [
        4,0,80,646,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
        84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
        91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,3,24,334,8,24,1,25,1,25,
        5,25,338,8,25,10,25,12,25,341,9,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,
        1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,
        1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,
        1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,
        1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,
        1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,
        1,60,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,64,
        1,65,1,65,1,65,5,65,443,8,65,10,65,12,65,446,9,65,3,65,448,8,65,
        1,66,1,66,1,66,3,66,453,8,66,1,66,4,66,456,8,66,11,66,12,66,457,
        1,67,1,67,1,67,3,67,463,8,67,1,67,4,67,466,8,67,11,67,12,67,467,
        1,68,1,68,1,68,3,68,473,8,68,1,68,4,68,476,8,68,11,68,12,68,477,
        1,69,1,69,1,69,3,69,483,8,69,1,69,3,69,486,8,69,1,69,3,69,489,8,
        69,1,69,1,69,3,69,493,8,69,3,69,495,8,69,1,70,1,70,1,71,1,71,5,71,
        501,8,71,10,71,12,71,504,9,71,1,72,1,72,1,72,1,72,1,72,1,73,1,73,
        1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,5,75,
        525,8,75,10,75,12,75,528,9,75,1,75,1,75,1,75,1,76,1,76,1,76,3,76,
        536,8,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,80,1,81,1,81,
        1,81,3,81,550,8,81,1,82,1,82,3,82,554,8,82,1,82,1,82,1,82,5,82,559,
        8,82,10,82,12,82,562,9,82,3,82,564,8,82,1,83,1,83,1,83,3,83,569,
        8,83,1,84,1,84,1,85,1,85,1,85,1,85,3,85,577,8,85,1,86,1,86,1,86,
        1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,89,4,89,
        594,8,89,11,89,12,89,595,1,89,1,89,1,90,1,90,1,90,1,90,5,90,604,
        8,90,10,90,12,90,607,9,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,
        1,91,5,91,618,8,91,10,91,12,91,621,9,91,1,91,1,91,1,92,1,92,1,92,
        1,93,1,93,5,93,630,8,93,10,93,12,93,633,9,93,1,93,1,93,1,94,1,94,
        5,94,639,8,94,10,94,12,94,642,9,94,1,94,1,94,1,94,0,0,95,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
        37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,
        48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,
        115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,
        67,135,68,137,69,139,70,141,0,143,0,145,0,147,0,149,0,151,71,153,
        0,155,0,157,0,159,0,161,0,163,0,165,0,167,0,169,0,171,0,173,72,175,
        73,177,74,179,75,181,76,183,77,185,78,187,79,189,80,1,0,18,3,0,65,
        90,95,95,97,122,1,0,49,57,1,0,48,57,2,0,66,66,98,98,2,0,79,79,111,
        111,2,0,88,88,120,120,4,0,10,10,13,13,34,34,92,92,1,0,48,55,3,0,
        48,57,65,70,97,102,1,0,48,49,5,0,34,34,92,92,110,110,114,114,116,
        116,2,0,69,69,101,101,2,0,43,43,45,45,4,0,48,57,65,90,95,95,97,122,
        1,0,42,42,1,0,47,47,3,0,9,9,13,13,32,32,1,0,13,13,662,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
        93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
        0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,
        0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,
        121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,
        0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,
        1,0,0,0,0,151,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,
        0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,
        0,0,0,0,189,1,0,0,0,1,191,1,0,0,0,3,196,1,0,0,0,5,203,1,0,0,0,7,
        206,1,0,0,0,9,214,1,0,0,0,11,221,1,0,0,0,13,227,1,0,0,0,15,232,1,
        0,0,0,17,238,1,0,0,0,19,244,1,0,0,0,21,253,1,0,0,0,23,259,1,0,0,
        0,25,264,1,0,0,0,27,274,1,0,0,0,29,278,1,0,0,0,31,283,1,0,0,0,33,
        288,1,0,0,0,35,292,1,0,0,0,37,299,1,0,0,0,39,302,1,0,0,0,41,306,
        1,0,0,0,43,313,1,0,0,0,45,317,1,0,0,0,47,323,1,0,0,0,49,333,1,0,
        0,0,51,335,1,0,0,0,53,342,1,0,0,0,55,344,1,0,0,0,57,346,1,0,0,0,
        59,348,1,0,0,0,61,350,1,0,0,0,63,353,1,0,0,0,65,356,1,0,0,0,67,359,
        1,0,0,0,69,362,1,0,0,0,71,364,1,0,0,0,73,367,1,0,0,0,75,369,1,0,
        0,0,77,372,1,0,0,0,79,374,1,0,0,0,81,377,1,0,0,0,83,380,1,0,0,0,
        85,383,1,0,0,0,87,386,1,0,0,0,89,389,1,0,0,0,91,392,1,0,0,0,93,394,
        1,0,0,0,95,396,1,0,0,0,97,398,1,0,0,0,99,401,1,0,0,0,101,404,1,0,
        0,0,103,407,1,0,0,0,105,409,1,0,0,0,107,411,1,0,0,0,109,413,1,0,
        0,0,111,415,1,0,0,0,113,417,1,0,0,0,115,419,1,0,0,0,117,421,1,0,
        0,0,119,423,1,0,0,0,121,425,1,0,0,0,123,427,1,0,0,0,125,429,1,0,
        0,0,127,432,1,0,0,0,129,435,1,0,0,0,131,447,1,0,0,0,133,449,1,0,
        0,0,135,459,1,0,0,0,137,469,1,0,0,0,139,479,1,0,0,0,141,496,1,0,
        0,0,143,498,1,0,0,0,145,505,1,0,0,0,147,510,1,0,0,0,149,515,1,0,
        0,0,151,522,1,0,0,0,153,535,1,0,0,0,155,537,1,0,0,0,157,539,1,0,
        0,0,159,541,1,0,0,0,161,543,1,0,0,0,163,549,1,0,0,0,165,551,1,0,
        0,0,167,568,1,0,0,0,169,570,1,0,0,0,171,576,1,0,0,0,173,578,1,0,
        0,0,175,583,1,0,0,0,177,589,1,0,0,0,179,593,1,0,0,0,181,599,1,0,
        0,0,183,613,1,0,0,0,185,624,1,0,0,0,187,627,1,0,0,0,189,636,1,0,
        0,0,191,192,5,99,0,0,192,193,5,97,0,0,193,194,5,115,0,0,194,195,
        5,101,0,0,195,2,1,0,0,0,196,197,5,115,0,0,197,198,5,119,0,0,198,
        199,5,105,0,0,199,200,5,116,0,0,200,201,5,99,0,0,201,202,5,104,0,
        0,202,4,1,0,0,0,203,204,5,105,0,0,204,205,5,102,0,0,205,6,1,0,0,
        0,206,207,5,100,0,0,207,208,5,101,0,0,208,209,5,102,0,0,209,210,
        5,97,0,0,210,211,5,117,0,0,211,212,5,108,0,0,212,213,5,116,0,0,213,
        8,1,0,0,0,214,215,5,114,0,0,215,216,5,101,0,0,216,217,5,116,0,0,
        217,218,5,117,0,0,218,219,5,114,0,0,219,220,5,110,0,0,220,10,1,0,
        0,0,221,222,5,99,0,0,222,223,5,111,0,0,223,224,5,110,0,0,224,225,
        5,115,0,0,225,226,5,116,0,0,226,12,1,0,0,0,227,228,5,102,0,0,228,
        229,5,117,0,0,229,230,5,110,0,0,230,231,5,99,0,0,231,14,1,0,0,0,
        232,233,5,114,0,0,233,234,5,97,0,0,234,235,5,110,0,0,235,236,5,103,
        0,0,236,237,5,101,0,0,237,16,1,0,0,0,238,239,5,100,0,0,239,240,5,
        101,0,0,240,241,5,102,0,0,241,242,5,101,0,0,242,243,5,114,0,0,243,
        18,1,0,0,0,244,245,5,99,0,0,245,246,5,111,0,0,246,247,5,110,0,0,
        247,248,5,116,0,0,248,249,5,105,0,0,249,250,5,110,0,0,250,251,5,
        117,0,0,251,252,5,101,0,0,252,20,1,0,0,0,253,254,5,98,0,0,254,255,
        5,114,0,0,255,256,5,101,0,0,256,257,5,97,0,0,257,258,5,107,0,0,258,
        22,1,0,0,0,259,260,5,101,0,0,260,261,5,108,0,0,261,262,5,115,0,0,
        262,263,5,101,0,0,263,24,1,0,0,0,264,265,5,105,0,0,265,266,5,110,
        0,0,266,267,5,116,0,0,267,268,5,101,0,0,268,269,5,114,0,0,269,270,
        5,102,0,0,270,271,5,97,0,0,271,272,5,99,0,0,272,273,5,101,0,0,273,
        26,1,0,0,0,274,275,5,102,0,0,275,276,5,111,0,0,276,277,5,114,0,0,
        277,28,1,0,0,0,278,279,5,103,0,0,279,280,5,111,0,0,280,281,5,116,
        0,0,281,282,5,111,0,0,282,30,1,0,0,0,283,284,5,116,0,0,284,285,5,
        121,0,0,285,286,5,112,0,0,286,287,5,101,0,0,287,32,1,0,0,0,288,289,
        5,118,0,0,289,290,5,97,0,0,290,291,5,114,0,0,291,34,1,0,0,0,292,
        293,5,115,0,0,293,294,5,116,0,0,294,295,5,114,0,0,295,296,5,117,
        0,0,296,297,5,99,0,0,297,298,5,116,0,0,298,36,1,0,0,0,299,300,5,
        103,0,0,300,301,5,111,0,0,301,38,1,0,0,0,302,303,5,110,0,0,303,304,
        5,105,0,0,304,305,5,108,0,0,305,40,1,0,0,0,306,307,5,115,0,0,307,
        308,5,116,0,0,308,309,5,114,0,0,309,310,5,105,0,0,310,311,5,110,
        0,0,311,312,5,103,0,0,312,42,1,0,0,0,313,314,5,105,0,0,314,315,5,
        110,0,0,315,316,5,116,0,0,316,44,1,0,0,0,317,318,5,102,0,0,318,319,
        5,108,0,0,319,320,5,111,0,0,320,321,5,97,0,0,321,322,5,116,0,0,322,
        46,1,0,0,0,323,324,5,98,0,0,324,325,5,111,0,0,325,326,5,111,0,0,
        326,327,5,108,0,0,327,328,5,101,0,0,328,329,5,97,0,0,329,330,5,110,
        0,0,330,48,1,0,0,0,331,334,3,173,86,0,332,334,3,175,87,0,333,331,
        1,0,0,0,333,332,1,0,0,0,334,50,1,0,0,0,335,339,7,0,0,0,336,338,3,
        169,84,0,337,336,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,
        1,0,0,0,340,52,1,0,0,0,341,339,1,0,0,0,342,343,5,33,0,0,343,54,1,
        0,0,0,344,345,5,43,0,0,345,56,1,0,0,0,346,347,5,45,0,0,347,58,1,
        0,0,0,348,349,5,42,0,0,349,60,1,0,0,0,350,351,5,124,0,0,351,352,
        5,124,0,0,352,62,1,0,0,0,353,354,5,38,0,0,354,355,5,38,0,0,355,64,
        1,0,0,0,356,357,5,61,0,0,357,358,5,61,0,0,358,66,1,0,0,0,359,360,
        5,33,0,0,360,361,5,61,0,0,361,68,1,0,0,0,362,363,5,60,0,0,363,70,
        1,0,0,0,364,365,5,60,0,0,365,366,5,61,0,0,366,72,1,0,0,0,367,368,
        5,62,0,0,368,74,1,0,0,0,369,370,5,62,0,0,370,371,5,61,0,0,371,76,
        1,0,0,0,372,373,5,61,0,0,373,78,1,0,0,0,374,375,5,43,0,0,375,376,
        5,61,0,0,376,80,1,0,0,0,377,378,5,45,0,0,378,379,5,61,0,0,379,82,
        1,0,0,0,380,381,5,42,0,0,381,382,5,61,0,0,382,84,1,0,0,0,383,384,
        5,47,0,0,384,385,5,61,0,0,385,86,1,0,0,0,386,387,5,37,0,0,387,388,
        5,61,0,0,388,88,1,0,0,0,389,390,5,58,0,0,390,391,5,61,0,0,391,90,
        1,0,0,0,392,393,5,124,0,0,393,92,1,0,0,0,394,395,5,47,0,0,395,94,
        1,0,0,0,396,397,5,37,0,0,397,96,1,0,0,0,398,399,5,60,0,0,399,400,
        5,60,0,0,400,98,1,0,0,0,401,402,5,62,0,0,402,403,5,62,0,0,403,100,
        1,0,0,0,404,405,5,38,0,0,405,406,5,94,0,0,406,102,1,0,0,0,407,408,
        5,126,0,0,408,104,1,0,0,0,409,410,5,40,0,0,410,106,1,0,0,0,411,412,
        5,41,0,0,412,108,1,0,0,0,413,414,5,123,0,0,414,110,1,0,0,0,415,416,
        5,125,0,0,416,112,1,0,0,0,417,418,5,91,0,0,418,114,1,0,0,0,419,420,
        5,93,0,0,420,116,1,0,0,0,421,422,5,44,0,0,422,118,1,0,0,0,423,424,
        5,59,0,0,424,120,1,0,0,0,425,426,5,58,0,0,426,122,1,0,0,0,427,428,
        5,46,0,0,428,124,1,0,0,0,429,430,5,43,0,0,430,431,5,43,0,0,431,126,
        1,0,0,0,432,433,5,45,0,0,433,434,5,45,0,0,434,128,1,0,0,0,435,436,
        5,46,0,0,436,437,5,46,0,0,437,438,5,46,0,0,438,130,1,0,0,0,439,448,
        5,48,0,0,440,444,7,1,0,0,441,443,7,2,0,0,442,441,1,0,0,0,443,446,
        1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,448,1,0,0,0,446,444,
        1,0,0,0,447,439,1,0,0,0,447,440,1,0,0,0,448,132,1,0,0,0,449,450,
        5,48,0,0,450,455,7,3,0,0,451,453,5,95,0,0,452,451,1,0,0,0,452,453,
        1,0,0,0,453,454,1,0,0,0,454,456,3,159,79,0,455,452,1,0,0,0,456,457,
        1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,134,1,0,0,0,459,460,
        5,48,0,0,460,465,7,4,0,0,461,463,5,95,0,0,462,461,1,0,0,0,462,463,
        1,0,0,0,463,464,1,0,0,0,464,466,3,155,77,0,465,462,1,0,0,0,466,467,
        1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,136,1,0,0,0,469,470,
        5,48,0,0,470,475,7,5,0,0,471,473,5,95,0,0,472,471,1,0,0,0,472,473,
        1,0,0,0,473,474,1,0,0,0,474,476,3,157,78,0,475,472,1,0,0,0,476,477,
        1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,138,1,0,0,0,479,480,
        3,131,65,0,480,494,5,46,0,0,481,483,3,143,71,0,482,481,1,0,0,0,482,
        483,1,0,0,0,483,485,1,0,0,0,484,486,3,165,82,0,485,484,1,0,0,0,485,
        486,1,0,0,0,486,489,1,0,0,0,487,489,3,165,82,0,488,482,1,0,0,0,488,
        487,1,0,0,0,489,495,1,0,0,0,490,492,3,143,71,0,491,493,3,165,82,
        0,492,491,1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,494,488,1,0,0,
        0,494,490,1,0,0,0,494,495,1,0,0,0,495,140,1,0,0,0,496,497,7,2,0,
        0,497,142,1,0,0,0,498,502,7,2,0,0,499,501,7,2,0,0,500,499,1,0,0,
        0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,144,1,0,0,
        0,504,502,1,0,0,0,505,506,5,92,0,0,506,507,3,155,77,0,507,508,3,
        155,77,0,508,509,3,155,77,0,509,146,1,0,0,0,510,511,5,92,0,0,511,
        512,5,120,0,0,512,513,3,157,78,0,513,514,3,157,78,0,514,148,1,0,
        0,0,515,516,5,92,0,0,516,517,5,117,0,0,517,518,3,157,78,0,518,519,
        3,157,78,0,519,520,3,157,78,0,520,521,3,157,78,0,521,150,1,0,0,0,
        522,526,5,34,0,0,523,525,3,153,76,0,524,523,1,0,0,0,525,528,1,0,
        0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,526,1,0,
        0,0,529,530,5,34,0,0,530,531,6,75,0,0,531,152,1,0,0,0,532,536,3,
        161,80,0,533,536,8,6,0,0,534,536,5,47,0,0,535,532,1,0,0,0,535,533,
        1,0,0,0,535,534,1,0,0,0,536,154,1,0,0,0,537,538,7,7,0,0,538,156,
        1,0,0,0,539,540,7,8,0,0,540,158,1,0,0,0,541,542,7,9,0,0,542,160,
        1,0,0,0,543,544,5,92,0,0,544,545,7,10,0,0,545,162,1,0,0,0,546,547,
        5,92,0,0,547,550,8,10,0,0,548,550,5,92,0,0,549,546,1,0,0,0,549,548,
        1,0,0,0,550,164,1,0,0,0,551,553,7,11,0,0,552,554,7,12,0,0,553,552,
        1,0,0,0,553,554,1,0,0,0,554,563,1,0,0,0,555,564,5,48,0,0,556,560,
        7,1,0,0,557,559,7,2,0,0,558,557,1,0,0,0,559,562,1,0,0,0,560,558,
        1,0,0,0,560,561,1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,563,555,
        1,0,0,0,563,556,1,0,0,0,564,166,1,0,0,0,565,566,7,0,0,0,566,569,
        3,169,84,0,567,569,5,95,0,0,568,565,1,0,0,0,568,567,1,0,0,0,569,
        168,1,0,0,0,570,571,7,13,0,0,571,170,1,0,0,0,572,577,8,14,0,0,573,
        574,5,42,0,0,574,577,8,15,0,0,575,577,3,181,90,0,576,572,1,0,0,0,
        576,573,1,0,0,0,576,575,1,0,0,0,577,172,1,0,0,0,578,579,5,116,0,
        0,579,580,5,114,0,0,580,581,5,117,0,0,581,582,5,101,0,0,582,174,
        1,0,0,0,583,584,5,102,0,0,584,585,5,97,0,0,585,586,5,108,0,0,586,
        587,5,115,0,0,587,588,5,101,0,0,588,176,1,0,0,0,589,590,5,10,0,0,
        590,591,6,88,1,0,591,178,1,0,0,0,592,594,7,16,0,0,593,592,1,0,0,
        0,594,595,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,
        0,597,598,6,89,2,0,598,180,1,0,0,0,599,600,5,47,0,0,600,601,5,42,
        0,0,601,605,1,0,0,0,602,604,3,171,85,0,603,602,1,0,0,0,604,607,1,
        0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,605,1,
        0,0,0,608,609,5,42,0,0,609,610,5,47,0,0,610,611,1,0,0,0,611,612,
        6,90,2,0,612,182,1,0,0,0,613,614,5,47,0,0,614,615,5,47,0,0,615,619,
        1,0,0,0,616,618,8,17,0,0,617,616,1,0,0,0,618,621,1,0,0,0,619,617,
        1,0,0,0,619,620,1,0,0,0,620,622,1,0,0,0,621,619,1,0,0,0,622,623,
        6,91,2,0,623,184,1,0,0,0,624,625,9,0,0,0,625,626,6,92,3,0,626,186,
        1,0,0,0,627,631,5,34,0,0,628,630,3,153,76,0,629,628,1,0,0,0,630,
        633,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,634,1,0,0,0,633,
        631,1,0,0,0,634,635,6,93,4,0,635,188,1,0,0,0,636,640,5,34,0,0,637,
        639,3,153,76,0,638,637,1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,640,
        641,1,0,0,0,641,643,1,0,0,0,642,640,1,0,0,0,643,644,3,163,81,0,644,
        645,6,94,5,0,645,190,1,0,0,0,30,0,333,339,444,447,452,457,462,467,
        472,477,482,485,488,492,494,502,526,535,549,553,560,563,568,576,
        595,605,619,631,640,6,1,75,0,1,88,1,6,0,0,1,92,2,1,93,3,1,94,4
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CASE = 1
    SWITCH = 2
    IF = 3
    DEFAULT = 4
    RETURN = 5
    CONST = 6
    FUNC = 7
    RANGE = 8
    DEFER = 9
    CONTINUE = 10
    BREAK = 11
    ELSE = 12
    INTERFACE = 13
    FOR = 14
    GOTO = 15
    TYPE = 16
    VAR = 17
    STRUCT = 18
    GO = 19
    NIL_LIT = 20
    STRING = 21
    INT = 22
    FLOAT = 23
    BOOLEAN = 24
    BOOLEAN_LIT = 25
    IDENTIFIER = 26
    LOGICAL_NOT = 27
    PLUS = 28
    MINUS = 29
    STAR = 30
    LOGICAL_OR = 31
    LOGICAL_AND = 32
    EQUALS = 33
    NOT_EQUALS = 34
    LESS = 35
    LESS_OR_EQUALS = 36
    GREATER = 37
    GREATER_OR_EQUALS = 38
    ASSIGN = 39
    PLUS_ASSIGN = 40
    MINUS_ASSIGN = 41
    MULT_ASSIGN = 42
    DIV_ASSIGN = 43
    MOD_ASSIGN = 44
    DECLARE_ASSIGN = 45
    OR = 46
    DIV = 47
    MOD = 48
    LSHIFT = 49
    RSHIFT = 50
    BIT_CLEAR = 51
    UNDERLYING = 52
    L_PAREN = 53
    R_PAREN = 54
    L_CURLY = 55
    R_CURLY = 56
    L_BRACKET = 57
    R_BRACKET = 58
    COMMA = 59
    SEMI = 60
    COLON = 61
    DOT = 62
    PLUS_PLUS = 63
    MINUS_MINUS = 64
    ELLIPSIS = 65
    DECIMAL_LIT = 66
    BINARY_LIT = 67
    OCTAL_LIT = 68
    HEX_LIT = 69
    DECIMAL_FLOAT_LIT = 70
    STRING_LIT = 71
    TRUE = 72
    FALSE = 73
    NEWLINE = 74
    WHITESPACE = 75
    COMMENT_MULTI = 76
    LINE_COMMENT = 77
    ERROR_CHAR = 78
    UNCLOSE_STRING = 79
    ILLEGAL_ESCAPE = 80

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'case'", "'switch'", "'if'", "'default'", "'return'", "'const'", 
            "'func'", "'range'", "'defer'", "'continue'", "'break'", "'else'", 
            "'interface'", "'for'", "'goto'", "'type'", "'var'", "'struct'", 
            "'go'", "'nil'", "'string'", "'int'", "'float'", "'boolean'", 
            "'!'", "'+'", "'-'", "'*'", "'||'", "'&&'", "'=='", "'!='", 
            "'<'", "'<='", "'>'", "'>='", "'='", "'+='", "'-='", "'*='", 
            "'/='", "'%='", "':='", "'|'", "'/'", "'%'", "'<<'", "'>>'", 
            "'&^'", "'~'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", 
            "';'", "':'", "'.'", "'++'", "'--'", "'...'", "'true'", "'false'", 
            "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "CASE", "SWITCH", "IF", "DEFAULT", "RETURN", "CONST", "FUNC", 
            "RANGE", "DEFER", "CONTINUE", "BREAK", "ELSE", "INTERFACE", 
            "FOR", "GOTO", "TYPE", "VAR", "STRUCT", "GO", "NIL_LIT", "STRING", 
            "INT", "FLOAT", "BOOLEAN", "BOOLEAN_LIT", "IDENTIFIER", "LOGICAL_NOT", 
            "PLUS", "MINUS", "STAR", "LOGICAL_OR", "LOGICAL_AND", "EQUALS", 
            "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", 
            "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
            "MOD_ASSIGN", "DECLARE_ASSIGN", "OR", "DIV", "MOD", "LSHIFT", 
            "RSHIFT", "BIT_CLEAR", "UNDERLYING", "L_PAREN", "R_PAREN", "L_CURLY", 
            "R_CURLY", "L_BRACKET", "R_BRACKET", "COMMA", "SEMI", "COLON", 
            "DOT", "PLUS_PLUS", "MINUS_MINUS", "ELLIPSIS", "DECIMAL_LIT", 
            "BINARY_LIT", "OCTAL_LIT", "HEX_LIT", "DECIMAL_FLOAT_LIT", "STRING_LIT", 
            "TRUE", "FALSE", "NEWLINE", "WHITESPACE", "COMMENT_MULTI", "LINE_COMMENT", 
            "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "CASE", "SWITCH", "IF", "DEFAULT", "RETURN", "CONST", 
                  "FUNC", "RANGE", "DEFER", "CONTINUE", "BREAK", "ELSE", 
                  "INTERFACE", "FOR", "GOTO", "TYPE", "VAR", "STRUCT", "GO", 
                  "NIL_LIT", "STRING", "INT", "FLOAT", "BOOLEAN", "BOOLEAN_LIT", 
                  "IDENTIFIER", "LOGICAL_NOT", "PLUS", "MINUS", "STAR", 
                  "LOGICAL_OR", "LOGICAL_AND", "EQUALS", "NOT_EQUALS", "LESS", 
                  "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", "ASSIGN", 
                  "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
                  "MOD_ASSIGN", "DECLARE_ASSIGN", "OR", "DIV", "MOD", "LSHIFT", 
                  "RSHIFT", "BIT_CLEAR", "UNDERLYING", "L_PAREN", "R_PAREN", 
                  "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", "COMMA", 
                  "SEMI", "COLON", "DOT", "PLUS_PLUS", "MINUS_MINUS", "ELLIPSIS", 
                  "DECIMAL_LIT", "BINARY_LIT", "OCTAL_LIT", "HEX_LIT", "DECIMAL_FLOAT_LIT", 
                  "DECIMAL_DIGIT", "DECIMALS", "OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", 
                  "LITTLE_U_VALUE", "STRING_LIT", "CHARACTER", "OCTAL_DIGIT", 
                  "HEX_DIGIT", "BIN_DIGIT", "ESC", "ESC_ILL", "EXPONENT", 
                  "LETTER", "ASCII_CHAR", "COMMENT_CONTENT", "TRUE", "FALSE", 
                  "NEWLINE", "WHITESPACE", "COMMENT_MULTI", "LINE_COMMENT", 
                  "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "MiniGo (3).g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def __init__(self, input=None, output=sys.stdout):
        super().__init__(input)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
        self.prevToken = None
        self.currentToken = None
        self.firstToken = True
        self.braceStack = []

    def emit(self):
        tk = self.type
        # print(f"TOKEN: {tk}->{self.text}")
        if tk == self.UNCLOSE_STRING:       
            result = super().emit()
            raise UncloseString(result.text)
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit()
            raise IllegalEscape(result.text)
        elif tk == self.ERROR_CHAR:
            result = super().emit()
            raise ErrorToken(result.text) 
        else:
            return super().emit()

    def shouldConvertNewlineToSemiColon(self):
        if self.prevToken is None or not isinstance(self.prevToken, CommonToken):
            return False

        lastType = self.prevToken.type

        return lastType in [
            self.IDENTIFIER,
            self.DECIMAL_LIT,
            self.DECIMAL_FLOAT_LIT,
            self.BOOLEAN_LIT,
            self.STRING_LIT,
            self.RETURN,
            self.CONTINUE,
            self.BREAK,
            self.INT,
            self.FLOAT,
            self.BOOLEAN,
            self.STRING,
            self.R_PAREN,
            self.R_BRACKET,
            self.R_CURLY,
            self.NIL_LIT,
            self.HEX_LIT,
            self.OCTAL_LIT,
            self.BINARY_LIT,
        ]

    def nextToken(self):
        if self.firstToken:
            self.currentToken = super().nextToken()
            while self.currentToken is not None and self.currentToken.type == self.NEWLINE:
                self.currentToken = super().nextToken()
            self.firstToken = False
        else:
            self.prevToken = self.currentToken
            self.currentToken = super().nextToken()

        if self.currentToken is None:
            return super().nextToken()

        if self.currentToken.type == self.NEWLINE:
            if self.shouldConvertNewlineToSemiColon():
                semiToken = CommonToken(self._tokenFactorySourcePair, self.SEMI, 0, self.currentToken.start, self.currentToken.stop)
                semiToken.text = ";"
                semiToken.line = self.currentToken.line  
                semiToken.column = self.currentToken.column
                return semiToken
            else:
                return super().nextToken()



        return self.currentToken



    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[75] = self.STRING_LIT_action 
            actions[88] = self.NEWLINE_action 
            actions[92] = self.ERROR_CHAR_action 
            actions[93] = self.UNCLOSE_STRING_action 
            actions[94] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
             
                from antlr4.Token import CommonToken  
                if self.shouldConvertNewlineToSemiColon():
                    semiToken = CommonToken(self._tokenFactorySourcePair, self.SEMI, 0, self._tokenStartCharIndex, self._tokenStartCharIndex)
                    semiToken.text = ";"
                    semiToken.line = self.currentToken.line  
                    semiToken.column = self.currentToken.column
                    self._token = semiToken
                else:
                    self.skip()

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                raise UncloseString(self.text[1:])  

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:

                raise IllegalEscape(self.text[1:]) 

     


